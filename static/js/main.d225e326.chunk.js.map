{"version":3,"sources":["utilities.js","App.js","index.js"],"names":["speak","text","utterance","SpeechSynthesisUtterance","window","speechSynthesis","stopSpeech","cancel","ObjectDetection","webcamRef","useRef","canvasRef","lastDetectedObject","setLastDetectedObject","useState","cameraFacingMode","setCameraFacingMode","isCameraRunning","setIsCameraRunning","intervalId","setIntervalId","runCoco","async","net","cocossd","console","log","id","setInterval","detect","current","video","readyState","videoWidth","videoHeight","width","height","obj","drawRect","detections","ctx","detectionsPresent","forEach","prediction","x","y","color","Math","floor","random","toString","strokeStyle","font","beginPath","fillStyle","fillText","rect","stroke","getContext","detectedObjectName","length","class","startCamera","facingMode","devices","navigator","mediaDevices","enumerateDevices","selectedDeviceId","device","kind","label","includes","deviceId","constraints","exact","undefined","some","stream","getUserMedia","srcObject","error","alert","useEffect","clearInterval","React","createElement","className","Webcam","ref","muted","style","position","marginLeft","marginRight","left","right","textAlign","zindex","maxWidth","top","bottom","transform","padding","borderRadius","onClick","switchCamera","newFacingMode","handleToggleCamera","stopCamera","getTracks","track","stop","ReactDOM","render","StrictMode","App","document","getElementById"],"mappings":"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","file":"static/js/main.d225e326.chunk.js","sourcesContent":["export const speak = (text) => {\n  const utterance = new SpeechSynthesisUtterance(text);\n  window.speechSynthesis.speak(utterance);\n}\n\nexport const drawRect = (detections, ctx) => {\n  // Variable to keep track of whether any detections are present\n  let detectionsPresent = false;\n\n  // Loop through each prediction\n  detections.forEach(prediction => {\n    // Extract boxes and classes\n    const [x, y, width, height] = prediction['bbox']; \n    const text = prediction['class']; \n\n    // Set styling\n    const color = Math.floor(Math.random()*16777215).toString(16);\n    ctx.strokeStyle = '#' + color\n    ctx.font = '18px Arial';\n\n    // Draw rectangles and text\n    ctx.beginPath();   \n    ctx.fillStyle = '#' + color\n    ctx.fillText(text, x, y);\n    ctx.rect(x, y, width, height); \n    ctx.stroke();\n\n    // Set detectionsPresent to true if any detections are found\n    detectionsPresent = true;\n\n    // Convert text to speech\n    speak(text);\n  });\n\n  // If no detections are present, stop speech synthesis\n  if (!detectionsPresent) {\n    stopSpeech();\n  }\n}\n\n// Function to stop speech synthesis\nconst stopSpeech = () => {\n  window.speechSynthesis.cancel(); // Stop any ongoing speech\n};\n\n","// Import dependencies\nimport React, { useRef, useState, useEffect } from \"react\";\nimport * as tf from \"@tensorflow/tfjs\";\nimport * as cocossd from \"@tensorflow-models/coco-ssd\";\nimport Webcam from \"react-webcam\";\nimport \"./App.css\";\nimport { drawRect } from \"./utilities\";\nimport { speak } from './utilities';\n\n// const ObjectDetection = App;\nfunction ObjectDetection() {\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null);\n  const [lastDetectedObject, setLastDetectedObject] = useState(null);\n  const [cameraFacingMode, setCameraFacingMode] = useState(\"environment\"); \n  const [isCameraRunning, setIsCameraRunning] = useState(true);\n  const [intervalId, setIntervalId] = useState(null);\n\n  const runCoco = async () => {\n    const net = await cocossd.load();\n    console.log(\"Coco-SSD model loaded.\");\n    const id = setInterval(() => {\n      detect(net);\n    }, 10);\n    setIntervalId(id); // Save the interval ID\n  };\n\n  const detect = async (net) => {\n    // Check data is available\n    if (\n      typeof webcamRef.current !== \"undefined\" &&\n      webcamRef.current !== null &&\n      webcamRef.current.video.readyState === 4\n    ) {\n      // Get Video Properties\n      const video = webcamRef.current.video;\n      const videoWidth = webcamRef.current.video.videoWidth;\n      const videoHeight = webcamRef.current.video.videoHeight;\n\n      // Set video width\n      webcamRef.current.video.width = videoWidth;\n      webcamRef.current.video.height = videoHeight;\n\n      // Set canvas height and width\n      canvasRef.current.width = videoWidth;\n      canvasRef.current.height = videoHeight;\n\n      // Make Detections\n      const obj = await net.detect(video);\n\n      // Draw mesh\n      const ctx = canvasRef.current.getContext(\"2d\");\n      drawRect(obj, ctx); \n\n      // Get the name of the first detected object\n      const detectedObjectName = obj.length > 0 ? obj[0].class : null;\n\n      // Speak and update state only if a new object is detected\n      if (detectedObjectName && detectedObjectName !== lastDetectedObject) {\n        speak(detectedObjectName); // Speak the detected object name\n        setLastDetectedObject(detectedObjectName); // Update state with the detected object name\n      }\n    }\n  };\n\n  \n  const startCamera = async (facingMode) => {\n    try {\n      console.log(\"Starting camera with facing mode:\", facingMode);\n      const devices = await navigator.mediaDevices.enumerateDevices();\n      let selectedDeviceId = null;\n  \n      // Find the back camera device ID\n      devices.forEach(device => {\n        if (device.kind === 'videoinput' && device.label.includes('back')) {\n          selectedDeviceId = device.deviceId;\n        }\n      });\n  \n      const constraints = {\n        video: {\n          deviceId: selectedDeviceId ? { exact: selectedDeviceId } : undefined,\n          facingMode: facingMode,\n        },\n      };\n      console.log('Selected Device ID:', selectedDeviceId);\n  \n      // Check if camera devices are available\n      if (devices.some(device => device.kind === 'videoinput')) {\n        const stream = await navigator.mediaDevices.getUserMedia(constraints);\n        webcamRef.current.srcObject = stream;\n        console.log(\"Camera started with facing mode:\", facingMode);\n      } else {\n        console.error(\"No camera devices available.\");\n        alert(\"No camera devices available.\");\n      }\n    } catch (error) {\n      console.error(\"Error accessing camera:\", error);\n      alert(\"Error accessing camera. Please make sure your camera is enabled and try again.\");\n    }\n  };\n  \n  \n  \n   const switchCamera = () => {\n    const newFacingMode = cameraFacingMode === \"user\" ? \"environment\" : \"user\"; \n    setCameraFacingMode(newFacingMode); \n    startCamera(newFacingMode); \n  };\n  \n  const stopCamera = () => {\n    if (webcamRef.current && webcamRef.current.srcObject) {\n      const tracks = webcamRef.current.srcObject.getTracks();\n      tracks.forEach(track => track.stop());\n      webcamRef.current.srcObject = null;\n      setLastDetectedObject(null); \n      setIsCameraRunning(false);\n\n      if (intervalId) {\n        clearInterval(intervalId);\n        setIntervalId(null);\n      }\n\n      window.speechSynthesis.cancel(); // Stop any ongoing speech\n    }\n  };\n  const handleToggleCamera = () => {\n    if (isCameraRunning) {\n      stopCamera();\n    } else {\n      startCamera(cameraFacingMode);\n      runCoco();\n      setIsCameraRunning(true);\n    }\n  };\n\n  //useEffect(()=>{runCoco()},[]);\n  useEffect(() => {\n    console.log(\"Running useEffect\");\n    runCoco(); \n    startCamera(cameraFacingMode); \n\n    return () => {\n      if (intervalId) {\n        clearInterval(intervalId);\n      }\n      window.speechSynthesis.cancel(); // Stop any ongoing speech when the component unmounts\n    };\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      <nav className=\"navbar\">\n          <h1 className=\"navbar-title\">Sight_Guide</h1>\n        </nav>\n\n      {isCameraRunning && (\n\n        <Webcam\n          ref={webcamRef}\n          muted={true} \n          style={{\n            position: \"absolute\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            left: 0,\n            right: 0,\n            textAlign: \"center\",\n            zindex: 9,\n            // width: 640,\n            // height: 480,\n            width: \"90%\", \n              maxWidth: \"640px\", \n              height: \"auto\", \n              top: \"80px\", \n          }}\n        />\n      )}\n\n      {isCameraRunning && (\n        <canvas\n          ref={canvasRef}\n          style={{\n            position: \"absolute\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            left: 0,\n            right: 0,\n            textAlign: \"center\",\n            zindex: 8,\n            // width: 640,\n            // height: 480,\n            width: \"90%\", \n            maxWidth: \"640px\", \n            height: \"auto\", \n            top: \"80px\", \n          }}\n        />\n      )}\n\n        {lastDetectedObject && (\n          <div\n            style={{\n              position: \"absolute\",\n              bottom: 80,\n              left: \"50%\",\n              transform: \"translateX(-50%)\",\n              color: \"white\",\n              padding: \"10px 10px\",\n              borderRadius: 2,\n            }}\n          >\n            Detected Object: {lastDetectedObject}\n          </div>\n        )}\n         <button className=\"button\" onClick={switchCamera}>\n         Switch Camera\n        </button>\n        <button className=\"stop-button\" onClick={handleToggleCamera}>\n        {isCameraRunning ? \"Close Camera\" : \"Open Camera\"}\n        </button>\n        \n      </header>\n    </div>\n  );\n}\n\nexport default ObjectDetection; \n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}